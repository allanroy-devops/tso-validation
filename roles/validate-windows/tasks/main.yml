---

- name: Include server firewall to check
  include_vars: server.yml

- name: Get hostname
  win_shell: echo {{ ansible_hostname }}  >  C:\Windows\Temp\{{ ansible_hostname }}_data.txt
  args:
    executable: cmd

- name: Put blank
  win_shell: echo( >>  C:\Windows\Temp\{{ ansible_hostname }}_data.txt
  args:
    executable: cmd

- name: Put blank
  win_shell: echo( >>  C:\Windows\Temp\{{ ansible_hostname }}_data.txt
  args:
    executable: cmd

- name: Put blank
  win_shell: ipconfig | find "IPv4 Address" >  C:\Windows\Temp\{{ ansible_hostname }}_ip.txt
  args:
    executable: cmd

- name: Grab ip only ***** first
  win_shell: |
    Get-Content C:\Windows\Temp\{{ ansible_hostname }}_ip.txt | %{ $_.Split(':')[1]; } > C:\Windows\Temp\{{ ansible_hostname }}_top.txt
    
- name: Grab ip only ***** top
  win_shell: |
     Get-Content C:\Windows\Temp\{{ ansible_hostname }}_top.txt -First 1 > C:\Windows\Temp\iptop.txt

- name: Grab ip only ***** trim
  win_shell: |
     (Get-Content C:\Windows\Temp\iptop.txt)[1].Trim() >> C:\Windows\Temp\{{ ansible_hostname }}_data.txt    

- name: Get the cpu core ***** first
  win_shell: |
     Get-WmiObject â€“class Win32_processor | ft NumberOfCores > C:\Windows\Temp\cpucore.txt
     
- name: Get the cpu core ***** last
  win_shell: |
     (Get-Content C:\Windows\Temp\cpucore.txt)[3].Trim() >> C:\Windows\Temp\{{ ansible_hostname }}_data.txt    

- name: Get the total memory
  win_shell: |
     ((Get-WmiObject -class "cim_physicalmemory" | Measure-Object -Property Capacity -Sum).Sum) /1024/1024/1024 >> C:\Windows\Temp\{{ ansible_hostname }}_data.txt    

- name: Get the total disk **** static for now
  win_shell: |
     echo 100 >> C:\Windows\Temp\{{ ansible_hostname }}_data.txt    

- name: delete csv
  win_shell: del /f /qC:\Windows\Temp\{{ ansible_hostname }}_output.csv
  args:
    executable: cmd
    warn: false
  ignore_errors: True

- name: Put the headers
  win_shell: echo 'Hostname,Check-Host,Port,IPAddress,CPUCore,RAM,Disk' > C:\Windows\Temp\{{ ansible_hostname }}_output.csv
  
- name: Put it in CSV in one line
  block: 
    - win_shell: Clear-Variable c
    - win_shell: Clear-Variable d
    - win_shell: $c=Get-Content -Path /tmp/{{ ansible_hostname }}_data.txt
    - win_shell: $c | %{$v += ($(if($v){", "}) + $_ + $t)}
    - win_shell: $v >> C:\Windows\Temp\{{ ansible_hostname }}_output.csv

- name: Check if remote host port
  wait_for: host={{ item.server2 }} port={{ item.port }} timeout=1
  ignore_errors: True
  register: out
  when: item.server1 == ansible_hostname
  with_items: "{{ servers }}"
  
- debug: var=out  
  
- name: Save remote port   
  win_shell: printf "\n,{{ item.item.server2 }} port {{ item.item.port }} is {% if item.failed %}closed{% else %}open{% endif %}"  >> C:\Windows\Temp\{{ ansible_hostname }}_output.csv
  args:
    executable: cmd
  when: item.item.server1 == ansible_hostname
  with_items: "{{ out.results }}"
  
- name: delete local /tmp/fetched
  win_shell: rm -fr /tmp/fetched/ 
  args:
    executable: cmd
    warn: False
  ignore_errors: True
  delegate_to: localhost
    
- name: Fetching file
  fetch:
    src: C:\Windows\Temp\{{ ansible_hostname }}_output.csv
    dest: /tmp/fetched
    flat: yes

#- name: Combined to one file
#  win_shell: cat /tmp/fetched/{{ ansible_hostname }}/tmp/{{ ansible_hostname }}_output.csv >> /tmp/fetched/main_output.csv && printf '\r\n' >> /tmp/fetched/main_output.csv
#  args:
#    executable: cmd
#  delegate_to: localhost   


 
    
